From 4bd08e4bd9420ffc4c9988d32dd49e8d9d912b6d Mon Sep 17 00:00:00 2001
From: DeadSix27 <DeadSix27@users.noreply.github.com>
Date: Thu, 19 Sep 2019 18:19:41 +0200
Subject: [PATCH] fix cross compiling with mingw

---
 CMakeLists.txt        |  2 +-
 loader/CMakeLists.txt | 16 ++++++++--------
 loader/loader.c       |  6 +++++-
 loader/loader.rc      |  5 ++++-
 loader/vulkan.pc.in   |  4 ++--
 5 files changed, 20 insertions(+), 13 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 81532fdb4..bee984e0b 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -119,7 +119,7 @@ if(UNIX AND NOT APPLE) # i.e.: Linux
 endif()
 
 if(WIN32)
-    find_package(WDK REQUIRED)
+    #find_package(WDK REQUIRED)
     option(ENABLE_WIN10_ONECORE "Link the loader with OneCore umbrella libraries" OFF)
     option(ENABLE_STATIC_LOADER "Build the loader as a static library" OFF)
 endif()
diff --git a/loader/CMakeLists.txt b/loader/CMakeLists.txt
index 8c2cedb15..d5dc31594 100644
--- a/loader/CMakeLists.txt
+++ b/loader/CMakeLists.txt
@@ -59,7 +59,7 @@ endif()
 set(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} -DDEBUG")
 set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -DDEBUG")
 
-if(WIN32)
+if(MSVC)
     # Use static MSVCRT libraries
     foreach(configuration
             in
@@ -122,7 +122,7 @@ set(ASM_FAILURE_MSG "The build will fall back on building with C code\n")
 set(ASM_FAILURE_MSG "${ASM_FAILURE_MSG}Note that this may be unsafe, as the C code requires tail-call optimizations to remove")
 set(ASM_FAILURE_MSG "${ASM_FAILURE_MSG} the stack frame for certain calls. If the compiler does not do this, then unknown device")
 set(ASM_FAILURE_MSG "${ASM_FAILURE_MSG} extensions will suffer from a corrupted stack.")
-if(WIN32)
+if(MSVC)
     enable_language(ASM_MASM)
     if(CMAKE_ASM_MASM_COMPILER_WORKS)
         if(NOT CMAKE_CL_64)
@@ -174,12 +174,12 @@ else(UNIX AND NOT APPLE) # i.e.: Linux
     endif()
 endif()
 
-if(WIN32)
+if(MSVC)
     add_library(loader-norm OBJECT ${NORMAL_LOADER_SRCS} dirent_on_windows.c)
     target_compile_options(loader-norm PUBLIC "$<$<CONFIG:DEBUG>:${LOCAL_C_FLAGS_DBG}>")
     target_compile_options(loader-norm PUBLIC ${MSVC_LOADER_COMPILE_OPTIONS})
     target_include_directories(loader-norm PRIVATE "$<TARGET_PROPERTY:Vulkan::Headers,INTERFACE_INCLUDE_DIRECTORIES>")
-    target_include_directories(loader-norm PRIVATE "${WDK_INCLUDE_DIRS}")
+    target_include_directories(loader-norm PRIVATE "${CMAKE_CURRENT_SOURCE_DIR}")
 
     add_library(loader-opt OBJECT ${OPT_LOADER_SRCS})
     add_dependencies(loader-opt loader_asm_gen_files)
@@ -232,14 +232,16 @@ else()
         set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wno-typedef-redefinition")
     endif()
 
-    add_library(vulkan SHARED ${NORMAL_LOADER_SRCS} ${OPT_LOADER_SRCS})
+    add_library(vulkan ${NORMAL_LOADER_SRCS} ${OPT_LOADER_SRCS})
     add_dependencies(vulkan loader_asm_gen_files)
+    if (NOT ENABLE_STATIC_LOADER)
     target_compile_definitions(vulkan PUBLIC -DLOADER_DYNAMIC_LIB)
     set_target_properties(vulkan
                           PROPERTIES SOVERSION
                                      "1"
                                      VERSION
                                      "${VulkanHeaders_VERSION_MAJOR}.${VulkanHeaders_VERSION_MINOR}.${VulkanHeaders_VERSION_PATCH}")
+    endif()
     target_link_libraries(vulkan ${CMAKE_DL_LIBS} -lpthread -lm)
     target_link_libraries(vulkan Vulkan::Headers)
 
@@ -298,9 +300,7 @@ else()
         include(FindPkgConfig QUIET)
         if(PKG_CONFIG_FOUND)
             set(VK_API_VERSION "${VulkanHeaders_VERSION_MAJOR}.${VulkanHeaders_VERSION_MINOR}.${VulkanHeaders_VERSION_PATCH}")
-            foreach(LIB ${CMAKE_CXX_IMPLICIT_LINK_LIBRARIES} ${PLATFORM_LIBS})
-                set(PRIVATE_LIBS "${PRIVATE_LIBS} -l${LIB}")
-            endforeach()
+            set(PRIVATE_LIBS "${PRIVATE_LIBS} -lshlwapi -lcfgmgr32 -ldxgi")
             configure_file("vulkan.pc.in" "vulkan.pc" @ONLY)
             install(FILES "${CMAKE_CURRENT_BINARY_DIR}/vulkan.pc" DESTINATION "${CMAKE_INSTALL_LIBDIR}/pkgconfig")
         endif()
diff --git a/loader/loader.c b/loader/loader.c
index 9d783b153..eb675d156 100644
--- a/loader/loader.c
+++ b/loader/loader.c
@@ -71,7 +71,7 @@
 #include <devpkey.h>
 #include <winternl.h>
 #include <d3dkmthk.h>
-#include <Dxgi1_6.h>
+#include <dxgi1_6.h>
 
 typedef _Check_return_ NTSTATUS (APIENTRY *PFN_D3DKMTEnumAdapters2)(const D3DKMT_ENUMADAPTERS2*);
 typedef _Check_return_ NTSTATUS (APIENTRY *PFN_D3DKMTQueryAdapterInfo)(const D3DKMT_QUERYADAPTERINFO*);
@@ -675,6 +675,10 @@ out:
 //
 // *reg_data contains a string list of filenames as pointer.
 // When done using the returned string list, the caller should free the pointer.
+#ifdef __MINGW32__
+#define CM_GETIDLIST_FILTER_PRESENT            (0x00000100)
+#define CM_GETIDLIST_FILTER_CLASS              (0x00000200)
+#endif
 VkResult loaderGetDeviceRegistryFiles(const struct loader_instance *inst, char **reg_data, PDWORD reg_data_size,
                                       LPCSTR value_name) {
     static const wchar_t *softwareComponentGUID = L"{5c4c3332-344d-483c-8739-259e934c9cc8}";
diff --git a/loader/loader.rc b/loader/loader.rc
index f70512628..831ccb9af 100755
--- a/loader/loader.rc
+++ b/loader/loader.rc
@@ -42,8 +42,11 @@
 // End of customize section
 ///////////////////////////////////////////////////////////////////////////////
 ///////////////////////////////////////////////////////////////////////////////
-
+#ifdef __MINGW64__
+#include <winresrc.h>
+#else // MSVC
 #include "winres.h"
+#endif
 
 #define VER_FILE_VERSION            VERSION_MAJOR, VERSION_MINOR, VERSION_PATCH, VERSION_BUILDNO
 
diff --git a/loader/vulkan.pc.in b/loader/vulkan.pc.in
index 2ce5aea43..6e897033f 100644
--- a/loader/vulkan.pc.in
+++ b/loader/vulkan.pc.in
@@ -1,6 +1,6 @@
 prefix=@CMAKE_INSTALL_PREFIX@
-exec_prefix=@CMAKE_INSTALL_PREFIX@
-libdir=${exec_prefix}/@CMAKE_INSTALL_LIBDIR@
+exec_prefix=${prefix}
+libdir=${exec_prefix}/lib
 includedir=${prefix}/include
 
 Name: @CMAKE_PROJECT_NAME@
-- 
2.22.0.windows.1

